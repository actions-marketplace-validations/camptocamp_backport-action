#!/usr/bin/env python3

import base64
import json
import os
import re
import subprocess
import sys
import traceback
from subprocess import PIPE, CalledProcessError

import requests

event = None
auth_header = "Bearer {}".format(os.environ["INPUT_TOKEN"])


def check_call(cmd, **kwargs):
    print("+ " + " ".join(cmd))
    sys.stdout.flush()
    subprocess.check_call(cmd, **kwargs)


def check_output(cmd, **kwargs):
    print("+ " + " ".join(cmd))
    sys.stdout.flush()
    subprocess.check_output(cmd, **kwargs)


def fail(message):
    print("Fail with message: " + message)
    sys.stdout.flush()
    responce = requests.post(
        event["pull_request"]["_links"]["comments"]["href"],
        json={"body": message},
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": auth_header,
            "Content-Type": "application/json",
        },
    )
    if not responce.ok:
        print("---")
        print(responce.text)
        sys.stdout.flush()
    sys.exit(1)


def backport(number, branch, repo=None):
    backport_branch = "backport/{}-to-{}".format(number, branch)
    auth = "http.extraheader=Authorization: basic {}".format(
        base64.b64encode(("x-access-token:" + os.environ["INPUT_TOKEN"]).encode()).decode()
    )
    src_workspace = dst_workspace = os.environ["GITHUB_WORKSPACE"]
    if not os.path.exists(src_workspace) or not os.listdir(src_workspace):
        print("+ git clone -c *** {} {}".format(event["repository"]["clone_url"], src_workspace))
        sys.stdout.flush()
        subprocess.check_call(["git", "clone", "-c", auth, event["repository"]["clone_url"], src_workspace])

    if repo:
        print("Backporting pull request #{} to branch {} on reposotory {}".format(number, branch, repo))
        sys.stdout.flush()
        repository = "https://github.com/{}.git".format(repo)
        refs = "https://api.github.com/repos/{}".format(repo)

        dst_workspace = "/tmp/" + repo
        if not os.path.exists(dst_workspace) or not os.listdir(dst_workspace):
            print("+ git clone -c *** {} {}".format(repository, dst_workspace))
            sys.stdout.flush()
            subprocess.check_call(["git", "clone", "-c", auth, repository, dst_workspace])
    else:
        print("Backporting pull request #{} to branch {}".format(number, branch))
        sys.stdout.flush()
        repository = event["repository"]["clone_url"]
        refs = event["repository"]["url"]

    url = "{}/git/ref/heads/{}".format(refs, backport_branch)
    responce = requests.get(
        url, headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if responce.ok:
        print("The branch {} allready exists.")
        sys.stdout.flush()
        return

    if responce.status_code != 404:
        fail("Error getting the branch {}:\n{}:\n{}".format(backport_branch, url, responce.text))

    merge_commit_sha = event["pull_request"]["merge_commit_sha"]

    responce = requests.get(
        event["repository"]["git_commits_url"].format(**{"/sha": "/" + merge_commit_sha}),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if not responce.ok:
        print(responce.text)
        sys.stdout.flush()
        raise Exception(responce.text)
    if len(responce.json()["parents"]) == 1:
        commits_sha = [merge_commit_sha]
    else:
        responce = requests.get(
            event["pull_request"]["_links"]["commits"]["href"],
            headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
        )
        if not responce.ok:
            print(responce.text)
            sys.stdout.flush()
            raise Exception(responce.text)
        commits_sha = [c["sha"] for c in responce.json()]

    check_call(["git", "checkout", branch], cwd=dst_workspace)
    check_call(["git", "checkout", "-b", backport_branch], cwd=dst_workspace)
    failed = False
    commands = []
    error = None
    for commit_sha in commits_sha:
        patch_file = os.path.join(dst_workspace, commit_sha + ".patch")
        if repo:
            with open(patch_file, "w") as dest:
                dest.write(
                    check_output(["git", "--no-pager", "show", "--patch", commit_sha], cwd=src_workspace)
                )
        if failed:
            if repo:
                commands.append("git apply --3way --index {}.patch".format(commit_sha))
                commands.append("rm {}.patch".format(commit_sha))
                commands.append(
                    'git commit --message="{}"'.format(
                        check_output(
                            ["git", "--no-pager", "log", "--format=format:%B", "-n", "1", commit_sha],
                            cwd=src_workspace,
                        )
                    )
                )
            else:
                commands.append("git cherry-pick " + commit_sha)
        else:
            try:
                check_call(
                    [
                        "git",
                        "config",
                        "--global",
                        "user.email",
                        check_output(
                            ["git", "--no-pager", "log", "--format=format:%ae", "-n", "1", commit_sha],
                            cwd=src_workspace,
                        ),
                    ],
                    cwd=dst_workspace,
                )
                check_call(
                    [
                        "git",
                        "config",
                        "--global",
                        "user.name",
                        check_output(
                            ["git", "--no-pager", "log", "--format=format:%an", "-n", "1", commit_sha],
                            cwd=src_workspace,
                        ),
                    ],
                    cwd=dst_workspace,
                )
                if repo:
                    check_call(["git", "apply", "--3way", "--index", patch_file], cwd=dst_workspace)
                    check_call(
                        [
                            "git",
                            "commit",
                            "--message="
                            + check_output(
                                ["git", "--no-pager", "log", "--format=format:%B", "-n", "1", commit_sha],
                                cwd=src_workspace,
                            ),
                        ],
                        cwd=dst_workspace,
                    )
                    os.unlink(patch_file)
                else:
                    check_call(["git", "cherry-pick", commit_sha], cwd=dst_workspace, stderr=PIPE)
            except CalledProcessError as e:
                failed = True
                error = "Error on backporting to branch {}, error on cherry picking {}:\n{}\n{}".format(
                    branch, commits_sha, e.stderr.decode(), e.stdout.decode()
                )
                if repo:
                    commands.append(
                        "git fetch && git checkout " + backport_branch + " && git reset --mixed HEAD^"
                    )
                    commands.append("rm BACKPORT_TODO")
                    check_call(["git", "add", patch_file])
                    commands.append("git apply --3way --index {}.patch".format(commit_sha))
                    commands.append("rm {}.patch".format(commit_sha))
                    commands.append(
                        'git commit --message="{}"'.format(
                            check_output(
                                ["git", "--no-pager", "log", "--format=format:%B", "-n", "1", commit_sha],
                                cwd=src_workspace,
                            )
                        )
                    )
                else:
                    commands.append(
                        "git fetch && git checkout " + backport_branch + " && git reset --hard HEAD^"
                    )
                    commands.append("git cherry-pick " + commit_sha)
                check_call(["git", "reset", "--hard"], cwd=dst_workspace)
    if failed:
        commands.append("git push origin {} --force".format(backport_branch))
        with open("BACKPORT_TODO", "w") as f:
            f.write("{}\n\nto continue do:\n{}\n".format(error, "\n".join(commands)))
        check_call(
            ["git", "add", "BACKPORT_TODO"], cwd=dst_workspace,
        )
        check_call(
            ["git", "commit", "--message=[skip ci] Add instructions to finish the backport"],
            cwd=dst_workspace,
        )
    check_call(
        ["git", "-c", auth, "push", "--set-upstream", "origin", backport_branch], cwd=dst_workspace,
    )

    title = event["pull_request"]["title"]
    pull_request_title = "[Backport {}] {}".format(branch, title)
    pull_request_body = "Backport of #{}".format(number)
    if failed:
        pull_request_body += "\n\nError on cherry picking:\n{}\n\nTo continue do:\n{}".format(
            error, "\n".join(commands)
        )
    pull_request = {
        "title": pull_request_title,
        "body": pull_request_body,
        "head": backport_branch,
        "base": branch,
        "maintainer_can_modify": True,
    }

    responce = requests.post(
        event["repository"]["url"] + "/pulls",
        json=pull_request,
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": auth_header,
            "Content-Type": "application/json",
        },
    )
    if not responce.ok:
        print(responce.text)
        sys.stdout.flush()


def delete(ref):
    refs = event["repository"]["url"]

    responce = requests.get(
        "{}/git/ref/heads/{}".format(refs, ref),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if responce.status_code == 404:
        print("Branch {} does not exists anymore".format(ref))
        sys.stdout.flush()
        return
    if not responce.ok:
        fail("Error getting the branch {}:\n{}".format(ref, responce.text))

    responce = requests.delete(
        "{}/git/refs/heads/{}".format(refs, ref),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if not responce.ok:
        fail("Fail to delete {}:\n{}".format(ref, responce.text))


def main():
    global event
    with open(os.environ["GITHUB_EVENT_PATH"], encoding="utf-8") as event_file:
        event = json.loads(event_file.read())
    if "INPUT_TOKEN" not in os.environ:
        print("Missing credentials")
        sys.stdout.flush()
        sys.exit(1)
    if len(os.environ["INPUT_TOKEN"]) == 0:
        print("Unable to upgrade from a fork or empty credential")
        sys.exit(1)
    print("Event")
    print(event)
    print()
    sys.stdout.flush()
    number = event["number"]
    state = event["pull_request"]["state"]
    login = event["pull_request"]["user"]["login"]
    merged = event["pull_request"]["merged"]
    labels = [label["name"] for label in event["pull_request"]["labels"]]

    if state == "closed" and login == "github-actions[bot]":
        print("Delete branch")
        sys.stdout.flush()
        delete(event["pull_request"]["head"]["ref"])

    if not merged:
        print("Pull request not merged")
        sys.stdout.flush()
        sys.exit(0)

    label_re = re.compile(r"^backport (.+)$")
    label_tag_re = re.compile(r"^(?:.* )?backport ([^ ]+)$")
    label_repo_re = re.compile(r"^(?:.* )?backport ([^ ]+) ([^ ]+)$")
    label_match = None
    for label in labels:
        try:
            # label needs to be `backport <name of the branch>`
            label_match = label_re.match(label)
            if label_match is not None:
                url = "{}/labels/{}".format(event["repository"]["url"], label)
                responce = requests.get(
                    url, headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
                )
                responce.raise_for_status()
                description = responce.json().get("description", "")
                match_tag = label_tag_re.match(description)
                match_repo = label_repo_re.match(description)
                if not match_tag and not match_repo:
                    match_tag = label_tag_re.match(label)
                    match_repo = label_repo_re.match(label)

                if match_tag:
                    print("Backport to branch {}".format(match_tag.group(1)))
                    sys.stdout.flush()
                    backport(number, match_tag.group(1))
                elif match_repo:
                    print("Backport to branch {} on {}".format(match_repo.group(2), match_repo.group(1)))
                    sys.stdout.flush()
                    backport(number, match_repo.group(2), match_repo.group(1))
        except Exception:
            traceback.print_exception(*sys.exc_info())
            fail(
                "Error on backporting to branch {}, see Docker Hub actions for more information.".format(
                    label_match.group(1) if label_match else "<no match>"
                )
            )


if __name__ == "__main__":
    main()
